// --------------------------------------------------------------------------------------------------------------------
// <copyright file="DrawCircle.cs" company="LeagueSharp">
//   Copyright (C) 2015 LeagueSharp
//   
//   This program is free software: you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, either version 3 of the License, or
//   (at your option) any later version.
//   
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//   
//   You should have received a copy of the GNU General Public License
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.
// </copyright>
// <summary>
//   The DrawCircle class, contains a set of tool to simply draw pre-defined circles and simple circles, both in 3D and
//   2D.
// </summary>
// --------------------------------------------------------------------------------------------------------------------
namespace LeagueSharp.SDK.Core.IDrawing
{
    using System;
    using System.Linq;

    using LeagueSharp.SDK.Core.Enumerations;
    using LeagueSharp.SDK.Core.Extensions.SharpDX;
    using LeagueSharp.SDK.Core.Utils;

    using SharpDX;
    using SharpDX.Direct3D9;

    /// <summary>
    ///     The DrawCircle class, contains a set of tool to simply draw pre-defined circles and simple circles, both in 3D and
    ///     2D.
    /// </summary>
    public class DrawCircle : DrawObject, IDisposable
    {
        #region Fields

        /// <summary>
        ///     The 2D vertices to be drawn.
        /// </summary>
        private readonly Vector2[] vector2Vertices = new Vector2[128];

        /// <summary>
        ///     The Line.
        /// </summary>
        private Line line;

        /// <summary>
        ///     The local sprite value.
        /// </summary>
        private float radius;

        /// <summary>
        ///     The texture sprite.
        /// </summary>
        private Sprite sprite;

        /// <summary>
        ///     Width local value.
        /// </summary>
        private int width;

        /// <summary>
        ///     The depth testing local value.
        /// </summary>
        private bool zDeep;

        #endregion

        #region Constructors and Destructors

        /// <summary>
        ///     Initializes a new instance of the <see cref="DrawCircle" /> class.
        /// </summary>
        /// <param name="position">
        ///     The position
        /// </param>
        public DrawCircle(Vector2? position = null)
            : base(position ?? new Vector2())
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DrawCircle" /> class.
        /// </summary>
        /// <param name="position">
        ///     The position
        /// </param>
        /// <param name="color">
        ///     The color
        /// </param>
        /// <param name="radius">
        ///     The radius
        /// </param>
        /// <param name="width">
        ///     The width.
        /// </param>
        /// <param name="smooth">
        ///     The circle smooth value modifier
        /// </param>
        public DrawCircle(Vector2 position, Color color, float radius, int width = 1, int smooth = 63)
            : this(position)
        {
            this.Color = color;
            this.Radius = radius;
            this.Width = width;
            this.Set2D(null, null, smooth);
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DrawCircle" /> class.
        /// </summary>
        /// <param name="position">
        ///     The position
        /// </param>
        public DrawCircle(Vector3 position)
        {
            this.Position3D = position;
            this.Is3D = true;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DrawCircle" /> class.
        /// </summary>
        /// <param name="position">
        ///     The position
        /// </param>
        /// <param name="radius">
        ///     The radius
        /// </param>
        /// <param name="color">
        ///     The color
        /// </param>
        /// <param name="width">
        ///     The width
        /// </param>
        /// <param name="zDeep">
        ///     The depth testing
        /// </param>
        public DrawCircle(Vector3 position, float radius, Color color, int width = 1, bool zDeep = false)
            : this(position)
        {
            this.Radius = radius;
            this.Color = color;
            this.Width = width;
            this.ZDeep = zDeep;
            this.Set3D();
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DrawCircle" /> class.
        /// </summary>
        /// <param name="position">
        ///     The position
        /// </param>
        /// <param name="offset">
        ///     The offset
        /// </param>
        /// <param name="radius">
        ///     The radius
        /// </param>
        /// <param name="color">
        ///     The color
        /// </param>
        /// <param name="width">
        ///     The width
        /// </param>
        /// <param name="zDeep">
        ///     The depth testing
        /// </param>
        public DrawCircle(
            Vector3 position, 
            Vector3 offset, 
            float radius, 
            Color color, 
            int width = 1, 
            bool zDeep = false)
            : this(position, radius, color, width, zDeep)
        {
            this.Offset = offset;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DrawCircle" /> class.
        /// </summary>
        /// <param name="unit">
        ///     The unit
        /// </param>
        /// <param name="radius">
        ///     The radius
        /// </param>
        /// <param name="color">
        ///     The color
        /// </param>
        /// <param name="width">
        ///     The width
        /// </param>
        /// <param name="zDeep">
        ///     The depth testing
        /// </param>
        public DrawCircle(GameObject unit, float radius, Color color, int width = 1, bool zDeep = false)
            : this(Vector3.Zero, radius, color, width, zDeep)
        {
            this.GameObjectUnit = unit;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DrawCircle" /> class.
        /// </summary>
        /// <param name="unit">
        ///     The unit
        /// </param>
        /// <param name="offset">
        ///     The offset
        /// </param>
        /// <param name="radius">
        ///     The radius
        /// </param>
        /// <param name="color">
        ///     The color
        /// </param>
        /// <param name="width">
        ///     The width
        /// </param>
        /// <param name="zDeep">
        ///     The depth testing
        /// </param>
        public DrawCircle(GameObject unit, Vector3 offset, float radius, Color color, int width = 1, bool zDeep = false)
            : this(unit, radius, color, width, zDeep)
        {
            this.Offset = offset;
        }

        /// <summary>
        ///     Finalizes an instance of the <see cref="DrawCircle" /> class.
        /// </summary>
        ~DrawCircle()
        {
            this.Dispose(false);
        }

        #endregion

        #region Public Properties

        /// <summary>
        ///     Gets or sets the game object unit.
        /// </summary>
        public GameObject GameObjectUnit { get; set; }

        /// <summary>
        ///     Gets or sets a value indicating whether the circle is 3D.
        /// </summary>
        public bool Is3D { get; set; }

        /// <summary>
        ///     Gets or sets the sprite.
        /// </summary>
        public Line Line
        {
            get
            {
                if (this.line != null && !this.line.IsDisposed)
                {
                    return this.line;
                }

                if (Drawing.Direct3DDevice != null && !Drawing.Direct3DDevice.IsDisposed)
                {
                    return
                        this.line = new Line(Drawing.Direct3DDevice) { GLLines = true, Antialias = false, Width = 1f };
                }

                return null;
            }

            set
            {
                this.line = value;
            }
        }

        /// <summary>
        ///     Gets or sets the offset.
        /// </summary>
        public Vector3 Offset { get; set; }

        /// <summary>
        ///     Gets or sets the 3D position.
        /// </summary>
        public Vector3 Position3D { get; set; }

        /// <summary>
        ///     Gets or sets the radius.
        /// </summary>
        public float Radius
        {
            get
            {
                return this.radius;
            }

            set
            {
                this.radius = value;
                if (this.Effect != null && !this.Effect.IsDisposed)
                {
                    this.Effect.SetValue("Radius", value);
                }
            }
        }

        /// <summary>
        ///     Gets or sets the sprite.
        /// </summary>
        public Sprite Sprite
        {
            get
            {
                if (this.sprite != null && !this.sprite.IsDisposed)
                {
                    return this.sprite;
                }

                if (Drawing.Direct3DDevice != null && !Drawing.Direct3DDevice.IsDisposed)
                {
                    return this.sprite = new Sprite(Drawing.Direct3DDevice);
                }

                return null;
            }

            set
            {
                this.sprite = value;
            }
        }

        /// <summary>
        ///     Gets or sets the sprite flags.
        /// </summary>
        public SpriteFlags SpriteFlags { get; set; }

        /// <summary>
        ///     Gets or sets the width.
        /// </summary>
        public int Width
        {
            get
            {
                return this.width;
            }

            set
            {
                this.width = value;
                if (this.Effect != null && !this.Effect.IsDisposed)
                {
                    this.Effect.SetValue("Border", 2f + value);
                }

                if (this.Line != null && !this.Line.IsDisposed && !this.Is3D)
                {
                    this.Line.Width = value;
                }
            }
        }

        /// <summary>
        ///     Gets or sets a value indicating whether deep testing is enabled.
        /// </summary>
        public bool ZDeep
        {
            get
            {
                return this.zDeep;
            }

            set
            {
                this.zDeep = value;
                if (this.Effect != null && !this.Effect.IsDisposed)
                {
                    this.Effect.SetValue("zEnabled", value);
                }
            }
        }

        #endregion

        #region Properties

        /// <summary>
        ///     Gets or sets the effect.
        /// </summary>
        private Effect Effect { get; set; }

        /// <summary>
        ///     Gets or sets the vertex buffer.
        /// </summary>
        private VertexBuffer VertexBuffer { get; set; }

        /// <summary>
        ///     Gets or sets the vertex declaration.
        /// </summary>
        private VertexDeclaration VertexDeclaration { get; set; }

        #endregion

        #region Public Methods and Operators

        /// <summary>
        ///     Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public void Dispose()
        {
            this.Dispose(true);
        }

        /// <summary>
        ///     The drawing event call.
        /// </summary>
        /// <param name="drawType">
        ///     The draw Type.
        /// </param>
        public override void Draw(DrawType drawType)
        {
            if (this.Sprite != null && !this.Sprite.IsDisposed && this.IsVisible)
            {
                this.Sprite.Begin(this.SpriteFlags);

                if (this.Is3D && this.Effect != null && this.VertexBuffer != null && this.VertexDeclaration != null
                    && !this.Effect.IsDisposed && !this.VertexDeclaration.IsDisposed && !this.VertexBuffer.IsDisposed)
                {
                    var oldVertexDeclaration = Drawing.Direct3DDevice.VertexDeclaration;
                    var position = this.GameObjectUnit != null && this.GameObjectUnit.IsValid
                                       ? this.GameObjectUnit.Position + this.Offset
                                       : this.Position3D + this.Offset;

                    this.Effect.Begin();
                    this.Effect.BeginPass(0);

                    this.Effect.SetValue(
                        "ProjectionMatrix", 
                        Matrix.Translation(new Vector3(position.X, position.Z, position.Y)) * Drawing.View
                        * Drawing.Projection);
                    this.Effect.SetValue(
                        "CircleColor", 
                        new Vector4(this.Color.R / 255f, this.Color.G / 255f, this.Color.B / 255f, this.Color.A / 255f));

                    Drawing.Direct3DDevice.SetStreamSource(0, this.VertexBuffer, 0, Utilities.SizeOf<Vector4>() * 2);
                    Drawing.Direct3DDevice.VertexDeclaration = this.VertexDeclaration;

                    Drawing.Direct3DDevice.DrawPrimitives(PrimitiveType.TriangleList, 0, 2);

                    Drawing.Direct3DDevice.VertexDeclaration = oldVertexDeclaration;

                    this.Effect.EndPass();
                    this.Effect.End();
                }
                else if (!this.Is3D)
                {
                    this.Line.Begin();
                    this.Line.Draw(this.vector2Vertices.Where(v => v.IsValid()).ToArray(), this.Color);
                    this.Line.End();
                }

                this.Sprite.Flush();
                this.Sprite.End();
            }

            this.CallOnDraw();
        }

        /// <summary>
        ///     The OnLostDevice event.
        /// </summary>
        public override void OnPostReset()
        {
            if (this.Sprite != null && !this.Sprite.IsDisposed)
            {
                this.Sprite.OnResetDevice();
            }

            if (this.Effect != null && !this.Effect.IsDisposed)
            {
                this.Effect.OnResetDevice();
            }
        }

        /// <summary>
        ///     The OnPreReset event.
        /// </summary>
        public override void OnPreReset()
        {
            if (this.Sprite != null && !this.Sprite.IsDisposed)
            {
                this.Sprite.OnLostDevice();
            }

            if (this.Effect != null && !this.Effect.IsDisposed)
            {
                this.Effect.OnLostDevice();
            }
        }

        /// <summary>
        ///     Sets the circle to the 2D state.
        /// </summary>
        /// <param name="radiusV">
        ///     The radius
        /// </param>
        /// <param name="widthV">
        ///     The width
        /// </param>
        /// <param name="smooth">
        ///     The smooth
        /// </param>
        /// <returns>
        ///     The <see cref="DrawCircle" />.
        /// </returns>
        public DrawCircle Set2D(float? radiusV = null, int? widthV = null, int smooth = 63)
        {
            if (radiusV.HasValue)
            {
                this.Radius = radiusV.Value;
            }

            if (widthV.HasValue)
            {
                this.Width = widthV.Value;
            }

            var step = Math.PI * 2.0 / smooth;
            var count = 0;

            for (var i = 0d; i < Math.PI * 2.0; i += step)
            {
                this.vector2Vertices[count] = new Vector2(
                    (float)(this.Radius * Math.Cos(i) + this.Position.X), 
                    (float)(this.Radius * Math.Sin(i) + this.Position.Y));
                this.vector2Vertices[count + 1] =
                    new Vector2(
                        (float)(this.Radius * Math.Cos(i + step) + this.Position.X), 
                        (float)(this.Radius * Math.Sin(i + step) + this.Position.Y));
                count += 2;
            }

            this.Is3D = false;
            return this;
        }

        /// <summary>
        ///     Sets the circle to the 3D state.
        /// </summary>
        /// <param name="radiusV">
        ///     The radius
        /// </param>
        /// <param name="widthV">
        ///     The width
        /// </param>
        /// <param name="zDeepV">
        ///     The depth testing
        /// </param>
        /// <returns>
        ///     The <see cref="DrawCircle" />.
        /// </returns>
        public DrawCircle Set3D(float? radiusV = null, int? widthV = null, bool? zDeepV = null)
        {
            if (radiusV.HasValue)
            {
                this.Radius = radiusV.Value;
            }

            if (widthV.HasValue)
            {
                this.Width = widthV.Value;
            }

            if (zDeepV.HasValue)
            {
                this.zDeep = zDeepV.Value;
            }

            this.VertexBuffer = new VertexBuffer(
                Drawing.Direct3DDevice, 
                Utilities.SizeOf<Vector4>() * 2 * 6, 
                Usage.WriteOnly, 
                VertexFormat.None, 
                Pool.Managed);
            this.VertexBuffer.Lock(0, 0, LockFlags.None)
                .WriteRange(
                    new[]
                        {
                            new Vector4(-6000f, 0f, -6000f, 1.0f), new Vector4(), new Vector4(-6000f, 0f, 6000f, 1.0f), 
                            new Vector4(), new Vector4(6000f, 0f, -6000f, 1.0f), new Vector4(), 
                            new Vector4(6000f, 0f, 6000f, 1.0f), new Vector4(), new Vector4(-6000f, 0f, 6000f, 1.0f), 
                            new Vector4(), new Vector4(6000f, 0f, -6000f, 1.0f), new Vector4()
                        });
            this.VertexBuffer.Unlock();

            this.VertexDeclaration = new VertexDeclaration(
                Drawing.Direct3DDevice, 
                new[]
                    {
                        new VertexElement(
                            0, 
                            0, 
                            DeclarationType.Float4, 
                            DeclarationMethod.Default, 
                            DeclarationUsage.Position, 
                            0), 
                        new VertexElement(
                            0, 
                            16, 
                            DeclarationType.Float4, 
                            DeclarationMethod.Default, 
                            DeclarationUsage.Color, 
                            0), 
                        VertexElement.VertexDeclarationEnd
                    });

            try
            {
                this.Effect = Effect.FromMemory(
                    Drawing.Direct3DDevice, 
                    new byte[]
                        {
                            0x01, 0x09, 0xFF, 0xFE, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
                            0x02, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x50, 0x72, 0x6F, 0x6A, 
                            0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x4D, 0x61, 0x74, 0x72, 0x69, 0x78, 0x00, 0x00, 0x00, 0x00, 
                            0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 
                            0x43, 0x69, 0x72, 0x63, 0x6C, 0x65, 0x43, 0x6F, 0x6C, 0x6F, 0x72, 0x00, 0x03, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0xD4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 
                            0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
                            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x42, 0x6F, 0x72, 0x64, 
                            0x65, 0x72, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x7A, 0x45, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x64, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
                            0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
                            0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
                            0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
                            0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
                            0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x50, 0x30, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 
                            0x4D, 0x61, 0x69, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
                            0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x01, 0x00, 0x00, 0x28, 0x01, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x01, 0x00, 0x00, 0x00, 0xEC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x3C, 0x01, 0x00, 0x00, 
                            0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x5C, 0x01, 0x00, 0x00, 
                            0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x7C, 0x01, 0x00, 0x00, 
                            0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x01, 0x00, 0x00, 0x9C, 0x01, 0x00, 0x00, 
                            0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xBC, 0x01, 0x00, 0x00, 
                            0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x01, 0x00, 0x00, 0xD4, 0x01, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x04, 0x00, 0x00, 
                            0x00, 0x02, 0xFF, 0xFF, 0xFE, 0xFF, 0x38, 0x00, 0x43, 0x54, 0x41, 0x42, 0x1C, 0x00, 0x00, 0x00, 
                            0xAA, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x20, 0xA3, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x02, 0x00, 0x05, 0x00, 
                            0x01, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 
                            0x02, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 
                            0x9C, 0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 
                            0x70, 0x00, 0x00, 0x00, 0x42, 0x6F, 0x72, 0x64, 0x65, 0x72, 0x00, 0xAB, 0x00, 0x00, 0x03, 0x00, 
                            0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x69, 0x72, 0x63, 
                            0x6C, 0x65, 0x43, 0x6F, 0x6C, 0x6F, 0x72, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x04, 0x00, 
                            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x00, 0x70, 
                            0x73, 0x5F, 0x32, 0x5F, 0x30, 0x00, 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 
                            0x28, 0x52, 0x29, 0x20, 0x48, 0x4C, 0x53, 0x4C, 0x20, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x20, 
                            0x43, 0x6F, 0x6D, 0x70, 0x69, 0x6C, 0x65, 0x72, 0x20, 0x39, 0x2E, 0x32, 0x39, 0x2E, 0x39, 0x35, 
                            0x32, 0x2E, 0x33, 0x31, 0x31, 0x31, 0x00, 0xAB, 0xFE, 0xFF, 0x7C, 0x00, 0x50, 0x52, 0x45, 0x53, 
                            0x01, 0x02, 0x58, 0x46, 0xFE, 0xFF, 0x30, 0x00, 0x43, 0x54, 0x41, 0x42, 0x1C, 0x00, 0x00, 0x00, 
                            0x8B, 0x00, 0x00, 0x00, 0x01, 0x02, 0x58, 0x46, 0x02, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 
                            0x00, 0x01, 0x00, 0x20, 0x88, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 
                            0x01, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00, 
                            0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x00, 0x00, 
                            0x42, 0x6F, 0x72, 0x64, 0x65, 0x72, 0x00, 0xAB, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 
                            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x69, 0x72, 0x63, 0x6C, 0x65, 0x43, 0x6F, 
                            0x6C, 0x6F, 0x72, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x74, 0x78, 0x00, 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 
                            0x20, 0x28, 0x52, 0x29, 0x20, 0x48, 0x4C, 0x53, 0x4C, 0x20, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 
                            0x20, 0x43, 0x6F, 0x6D, 0x70, 0x69, 0x6C, 0x65, 0x72, 0x20, 0x39, 0x2E, 0x32, 0x39, 0x2E, 0x39, 
                            0x35, 0x32, 0x2E, 0x33, 0x31, 0x31, 0x31, 0x00, 0xFE, 0xFF, 0x0C, 0x00, 0x50, 0x52, 0x53, 0x49, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x1A, 0x00, 
                            0x43, 0x4C, 0x49, 0x54, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xBF, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x1F, 0x00, 0x46, 0x58, 0x4C, 0x43, 
                            0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x30, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x40, 0xA0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
                            0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
                            0x03, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
                            0xF0, 0xF0, 0xF0, 0xF0, 0x0F, 0x0F, 0x0F, 0x0F, 0xFF, 0xFF, 0x00, 0x00, 0x51, 0x00, 0x00, 0x05, 
                            0x06, 0x00, 0x0F, 0xA0, 0x00, 0x00, 0xE0, 0x3F, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0xBF, 
                            0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x07, 0xB0, 
                            0x05, 0x00, 0x00, 0x03, 0x00, 0x00, 0x08, 0x80, 0x00, 0x00, 0xAA, 0xB0, 0x00, 0x00, 0xAA, 0xB0, 
                            0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0xB0, 
                            0x00, 0x00, 0xFF, 0x80, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x80, 
                            0x06, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x03, 
                            0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x81, 0x04, 0x00, 0x00, 0xA0, 0x02, 0x00, 0x00, 0x03, 
                            0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x00, 0x81, 0x05, 0x00, 0x00, 0xA1, 0x58, 0x00, 0x00, 0x04, 
                            0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x55, 0x80, 0x06, 0x00, 0x55, 0xA0, 0x06, 0x00, 0xAA, 0xA0, 
                            0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0x80, 0x05, 0x00, 0x00, 0xA1, 
                            0x58, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0xAA, 0x80, 0x06, 0x00, 0x55, 0xA0, 
                            0x00, 0x00, 0x55, 0x80, 0x05, 0x00, 0x00, 0x03, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0x80, 
                            0x06, 0x00, 0x00, 0xA0, 0x58, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x80, 
                            0x06, 0x00, 0xAA, 0xA0, 0x06, 0x00, 0x55, 0xA0, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x08, 0x80, 
                            0x06, 0x00, 0x55, 0xA0, 0x58, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x80, 0x01, 0x00, 0x00, 0xA0, 
                            0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x80, 0x05, 0x00, 0x00, 0x03, 0x00, 0x00, 0x04, 0x80, 
                            0x00, 0x00, 0xAA, 0x80, 0x00, 0x00, 0x00, 0xA0, 0x23, 0x00, 0x00, 0x02, 0x00, 0x00, 0x04, 0x80, 
                            0x00, 0x00, 0xAA, 0x80, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x80, 0x03, 0x00, 0xFF, 0xA0, 
                            0x00, 0x00, 0xAA, 0x81, 0x03, 0x00, 0xFF, 0xA0, 0x58, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x80, 
                            0x00, 0x00, 0x55, 0x80, 0x06, 0x00, 0xFF, 0xA0, 0x00, 0x00, 0xAA, 0x80, 0x58, 0x00, 0x00, 0x04, 
                            0x00, 0x00, 0x08, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x55, 0x80, 0x03, 0x00, 0xFF, 0xA0, 
                            0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x07, 0x80, 0x02, 0x00, 0xE4, 0xA0, 0x01, 0x00, 0x00, 0x02, 
                            0x00, 0x08, 0x0F, 0x80, 0x00, 0x00, 0xE4, 0x80, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x4C, 0x01, 0x00, 0x00, 0x00, 0x02, 0xFE, 0xFF, 0xFE, 0xFF, 0x34, 0x00, 0x43, 0x54, 0x41, 0x42, 
                            0x1C, 0x00, 0x00, 0x00, 0x9B, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0xFF, 0x01, 0x00, 0x00, 0x00, 
                            0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x94, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 
                            0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 
                            0x50, 0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x4D, 0x61, 0x74, 0x72, 0x69, 0x78, 
                            0x00, 0xAB, 0xAB, 0xAB, 0x03, 0x00, 0x03, 0x00, 0x04, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x76, 0x73, 0x5F, 0x32, 0x5F, 0x30, 0x00, 0x4D, 0x69, 0x63, 0x72, 0x6F, 
                            0x73, 0x6F, 0x66, 0x74, 0x20, 0x28, 0x52, 0x29, 0x20, 0x48, 0x4C, 0x53, 0x4C, 0x20, 0x53, 0x68, 
                            0x61, 0x64, 0x65, 0x72, 0x20, 0x43, 0x6F, 0x6D, 0x70, 0x69, 0x6C, 0x65, 0x72, 0x20, 0x39, 0x2E, 
                            0x32, 0x39, 0x2E, 0x39, 0x35, 0x32, 0x2E, 0x33, 0x31, 0x31, 0x31, 0x00, 0x1F, 0x00, 0x00, 0x02, 
                            0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x0F, 0x90, 0x1F, 0x00, 0x00, 0x02, 0x0A, 0x00, 0x00, 0x80, 
                            0x01, 0x00, 0x0F, 0x90, 0x09, 0x00, 0x00, 0x03, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0xE4, 0x90, 
                            0x00, 0x00, 0xE4, 0xA0, 0x09, 0x00, 0x00, 0x03, 0x00, 0x00, 0x02, 0xC0, 0x00, 0x00, 0xE4, 0x90, 
                            0x01, 0x00, 0xE4, 0xA0, 0x09, 0x00, 0x00, 0x03, 0x00, 0x00, 0x04, 0xC0, 0x00, 0x00, 0xE4, 0x90, 
                            0x02, 0x00, 0xE4, 0xA0, 0x09, 0x00, 0x00, 0x03, 0x00, 0x00, 0x08, 0xC0, 0x00, 0x00, 0xE4, 0x90, 
                            0x03, 0x00, 0xE4, 0xA0, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x0F, 0xD0, 0x01, 0x00, 0xE4, 0x90, 
                            0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0xE4, 0x90, 0xFF, 0xFF, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x02, 0x58, 0x46, 0xFE, 0xFF, 0x25, 0x00, 
                            0x43, 0x54, 0x41, 0x42, 0x1C, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x02, 0x58, 0x46, 
                            0x01, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 0x5C, 0x00, 0x00, 0x00, 
                            0x30, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 
                            0x4C, 0x00, 0x00, 0x00, 0x7A, 0x45, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x64, 0x00, 0xAB, 0xAB, 0xAB, 
                            0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x74, 0x78, 0x00, 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x28, 0x52, 0x29, 
                            0x20, 0x48, 0x4C, 0x53, 0x4C, 0x20, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x20, 0x43, 0x6F, 0x6D, 
                            0x70, 0x69, 0x6C, 0x65, 0x72, 0x20, 0x39, 0x2E, 0x32, 0x39, 0x2E, 0x39, 0x35, 0x32, 0x2E, 0x33, 
                            0x31, 0x31, 0x31, 0x00, 0xFE, 0xFF, 0x02, 0x00, 0x43, 0x4C, 0x49, 0x54, 0x00, 0x00, 0x00, 0x00, 
                            0xFE, 0xFF, 0x0C, 0x00, 0x46, 0x58, 0x4C, 0x43, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x10, 
                            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 
                            0x0F, 0x0F, 0x0F, 0x0F, 0xFF, 0xFF, 0x00, 0x00
                        }, 
                    ShaderFlags.None);
            }
            catch (Exception e)
            {
                Logging.Write()(LogLevel.Fatal, "Unable to create 3D circle effect, exception occured:\n{0}", e);
                return null;
            }

            this.Effect.SetValue("Radius", this.Radius);
            this.Effect.SetValue("Border", 2f + this.Width);
            this.Effect.SetValue("zEnabled", this.ZDeep);

            this.Is3D = true;
            return this;
        }

        /// <summary>
        ///     The OnUpdate event.
        /// </summary>
        public override void Update()
        {
            this.CallOnUpdate();
        }

        #endregion

        #region Methods

        /// <summary>
        ///     Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged and managed
        ///     resources.
        /// </summary>
        /// <param name="type">
        ///     The type of free, release or reset of resources.
        /// </param>
        private void Dispose(bool type)
        {
            if (type)
            {
                if (this.Sprite != null && !this.Sprite.IsDisposed)
                {
                    this.Sprite.Dispose();
                    this.Sprite = null;
                }

                if (this.Effect != null && this.Effect.IsDisposed)
                {
                    this.Effect.Dispose();
                    this.Effect = null;
                }

                if (this.VertexBuffer != null && this.VertexBuffer.IsDisposed)
                {
                    this.VertexBuffer.Dispose();
                    this.VertexBuffer = null;
                }

                if (this.VertexDeclaration != null && this.VertexDeclaration.IsDisposed)
                {
                    this.VertexDeclaration.Dispose();
                    this.VertexDeclaration = null;
                }

                if (this.Line != null && !this.Line.IsDisposed)
                {
                    this.Line.Dispose();
                    this.Line = null;
                }

                for (var i = 0; i < this.vector2Vertices.Length; ++i)
                {
                    this.vector2Vertices[i] = Vector2.Zero;
                }
            }
        }

        #endregion
    }
}